{"version":3,"sources":["index.js"],"names":["Square","props","console","log","className","onClick","value","Board","renderSquare","i","squares","Game","state","history","Array","fill","stepNumber","xIsNext","this","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","React","Component","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wNAIA,SAASA,EAAOC,GAEZ,OADAC,QAAQC,IAAI,aAER,wBAAQC,UAAU,SAASC,QAASJ,EAAMI,QAA1C,SACKJ,EAAMK,QAKnB,SAASC,EAAMN,GACX,SAASO,EAAaC,GAClB,OAAO,cAACT,EAAD,CAAQM,MAAOL,EAAMS,QAAQD,GAAIJ,QAAS,kBAAMJ,EAAMI,QAAQI,MAIzE,OADAP,QAAQC,IAAI,SAER,gCACI,sBAAKC,UAAU,YAAf,UACKI,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKJ,UAAU,YAAf,UACKI,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKJ,UAAU,YAAf,UACKI,EAAa,GAEbA,EAAa,GACbA,EAAa,S,IAMxBG,E,kDACF,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IACDW,MAAQ,CACTC,QAAS,CAAC,CAAEH,QAASI,MAAM,GAAGC,KAAK,QACnCC,WAAY,EACZC,SAAS,GALE,E,+CASnB,SAAYR,GACR,IAAMI,EAAUK,KAAKN,MAAMC,QAAQM,MAAM,EAAGD,KAAKN,MAAMI,WAAa,GAE9DN,EADUG,EAAQA,EAAQO,OAAS,GACjBV,QAAQS,QAE5BE,EAAgBX,IAAYA,EAAQD,KAIxCC,EAAQD,GAAKS,KAAKN,MAAMK,QAAU,IAAM,IACxCC,KAAKI,SAAS,CACVT,QAASA,EAAQU,OAAO,CAAC,CAAEb,QAASA,KACpCM,WAAYH,EAAQO,OACpBH,SAAUC,KAAKN,MAAMK,a,oBAI7B,SAAOO,GACHN,KAAKI,SAAS,CACVN,WAAYQ,EACZP,QAASO,EAAO,IAAM,M,oBAI9B,WAAU,IAAD,OACLtB,QAAQC,IAAI,QACZ,IAcIsB,EAdEZ,EAAUK,KAAKN,MAAMC,QACrBa,EAAUb,EAAQK,KAAKN,MAAMI,YAC7BW,EAASN,EAAgBK,EAAQhB,SAEjCkB,EAAQf,EAAQgB,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAE5C,OACI,6BACI,wBAAQzB,QAAS,kBAAM,EAAK2B,OAAOF,IAAnC,SAA2CC,KADtCD,MAcjB,OANIL,EADAE,EACS,WAAaA,EAEQ,IAA1BT,KAAKN,MAAMI,WAA2B,OAC5B,iBAAmBE,KAAKN,MAAMK,QAAU,IAAM,KAI5D,sBAAKb,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACG,EAAD,CACIG,QAASgB,EAAQhB,QACjBL,QAAS,SAACI,GAAD,OAAO,EAAKwB,YAAYxB,QAGzC,sBAAKL,UAAU,YAAf,UACI,8BAAMqB,IACN,6BAAKG,c,GApENM,IAAMC,WA2EzB,SAASd,EAAgBX,GAWrB,IAVA,IAAM0B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF3B,EAAI,EAAGA,EAAI2B,EAAMhB,OAAQX,IAAK,CACnC,kBAAkB2B,EAAM3B,GAAxB,GAAO4B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GAClE,OAAO7B,EAAQ2B,GAGvB,OAAO,KAKXG,IAASC,OACL,cAAC9B,EAAD,IACA+B,SAASC,eAAe,W","file":"static/js/main.ec2a5d73.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    console.log('re-render');\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction Board(props) {\r\n    function renderSquare(i) {\r\n        return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;\r\n    }\r\n\r\n    console.log('board');\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{ squares: Array(9).fill(null) }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{ squares: squares }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: step % 2 === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log('game');\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            if (this.state.stepNumber === 9) status = 'Draw';\r\n            else status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}